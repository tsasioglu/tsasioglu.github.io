<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2019-11-07 15:28"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Things I Should Know </title>
<link>https://thingsishouldknowasadeveloper.wordpress.com</link>
<description>as a Developer</description>
<pubDate>Thu, 07 Nov 2019 15:28:25 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://thingsishouldknowasadeveloper.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>mrd3v3l0p3r</wp:author_login>
  <wp:author_email>tazxxx88@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[mrd3v3l0p3r]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Things I Should Know </title>
		<link>https://thingsishouldknowasadeveloper.wordpress.com</link>
	</image>
	<item>
  <title>What Static Typing is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/01/what-static-typing-is/</link>
  <pubDate>Wed, 01 May 2013 20:00:00 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=2</guid>
  <description/>
  <content:encoded><![CDATA[There are two main types of typing, <em>Static Typing</em> and <em>Dynamic Typing.</em>
<h1>Static Typing</h1>
<ul>
	<li><span style="line-height:14px;">A variable's type is fixed i.e. <em>static</em></span></li>
	<li>It therefore must be explicitly defined by the programmer</li>
	<li>Which can result in some horrible complex types (i.e. nested generics)...</li>
	<li>...but enables checks to be run at compile-time</li>
</ul>
<h1>Dynamic Typing</h1>
<ul>
	<li><span style="line-height:14px;">A variable's type is not defined by the programmer</span></li>
	<li><span style="line-height:14px;">It is left until run-time to assign a type</span></li>
	<li>This enables simpler, more flexible and more readable code..</li>
	<li>...but assumes the author knew what they were doing</li>
</ul>
&nbsp;

So <em>Static Typing </em>is the longer, safer, more clumsy method where <em>Dynamic Typing </em>is the speedy, risky, more flexible method.

The ugly definition drawback of static typing can be overcome (in C#) by using I<em>mplicit Types </em>i.e. using the <em>var </em>keyword.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2013-05-01 20:00:00</wp:post_date>
  <wp:post_date_gmt>2013-05-01 20:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-static-typing-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What the Composite pattern is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/02/what-the-composite-pattern-is/</link>
  <pubDate>Thu, 02 May 2013 20:13:36 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=24</guid>
  <description/>
  <content:encoded><![CDATA[The <em>Composite</em> design pattern is when objects can contain references of their own hierarchical type.

In this way objects are composed into a tree structure, with a <em>consistent interface</em> at each point in the traversal.

e.g. a <em>node </em>object can contain multiple references to other <em>node</em> objects, which may be true nodes or may just be leaf nodes.

<a href="http://thingsishouldknowasadeveloper.files.wordpress.com/2013/05/600px-composite_uml_class_diagram_fixed-svg.png"><img id="i-28" class="size-full wp-image" src="http://thingsishouldknowasadeveloper.files.wordpress.com/2013/05/600px-composite_uml_class_diagram_fixed-svg.png?w=590" alt="Composition" width="590" height="382" /></a>

As <em>Composite,</em> <em>Component </em>and <em>Leaf </em>objects can be treated in the same way, code is simpler and less error prone.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2013-05-02 20:13:36</wp:post_date>
  <wp:post_date_gmt>2013-05-02 20:13:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-the-composite-pattern-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What an N Tier architecture is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/13/what-a-2-tier-architecture-is/</link>
  <pubDate>Mon, 13 May 2013 23:10:19 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=37</guid>
  <description/>
  <content:encoded><![CDATA[Definitions of <em>n-tiered</em> architectures are not consistent, but some generally accepted versions are given below.
<h1>2 Tier Architecture</h1>
<ul>
	<li>Simple client server model with the client (tier #1) connecting to the server (tier #2) which handles all processing and data storage (data volumes usually small or none, to local filesystemonly).</li>
	<li>Alternatively, a thick client (including business logic) connecting directly to a database</li>
</ul>
<h1>3 Tier Architecture</h1>
<ul>
	<li>Client (Presentation) tier - generally GUI or at least some kind of basic UI running on the client machine</li>
	<li>Logic (Business) tier - includes all business logic, processing and messaging between the other two tiers</li>
	<li>Data (Storage) tier - Provides a non volatile store of data - generally a RDBMS but could also be XML, text file etc.</li>
</ul>
<h1>N Tier Architecture</h1>
<ul>
	<li>Any architecture with more than 3 tiers</li>
	<li>Increasingly common due to popularity of SOA</li>
	<li>Common in more complex custom systems and vendor solutions</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2013-05-13 23:10:19</wp:post_date>
  <wp:post_date_gmt>2013-05-13 23:10:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-a-2-tier-architecture-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="architecture"><![CDATA[architecture]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-05-13 23:10:19";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11426460330]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What an Immutable Object is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/16/what-an-immutable-object-is/</link>
  <pubDate>Thu, 16 May 2013 18:07:37 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=59</guid>
  <description/>
  <content:encoded><![CDATA[<p>An I<em>mmutable Object</em> is one which cannot be modified post creation.</p><ul><li>Immutable objects are consistent over time, so no synchronisation is required in a multi threaded application</li><li>Since they cannot change, a copy can be taken by reference</li><li>OOP languages often have immutable strings</li><li><em></em><em>Weakly Immutable </em>is when only some fields of an object are immutable</li><li><em>Strongly Immutable </em>is when an immutable object cannot be extended</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>59</wp:post_id>
  <wp:post_date>2013-05-16 18:07:37</wp:post_date>
  <wp:post_date_gmt>2013-05-16 18:07:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-an-immutable-object-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What MVVM is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/17/what-mvvm-is/</link>
  <pubDate>Fri, 17 May 2013 22:51:33 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=71</guid>
  <description/>
  <content:encoded><![CDATA[<p><em>Model View ViewModel </em>is an architectural design pattern for GUI applications. It is a Microsoft specialisation of the <em>MVC </em>pattern.</p><ul><li>The <em>View </em>is the usual <em>MVC View </em>containing GUI elements, e.g. WPF .xaml file</li><li>The <em>Model</em> is the usual <em>MVC Model </em>object containing all the business logic. e.g. usual C# .cs files.</li><li>In event driven technologies such as WPF, HTML5 and Silverlight, some of the traditional <em>MVC </em><em>Controller</em> tasks are done via data binding (e.g. from XAML listView to array of business objects in the Model.</li><li>The <em>ViewModel</em> then acts as an intermediary between the Model and the View; arranging objects for convenience and clarity, and passing commands and notifications. e.g. WPF .xaml.cs file.</li><li>Only one <em>ViewModel </em>(.xaml.cs) can exist for each <em>View (</em>.xaml). </li><li>Benefits from separation of concerns.</li></ul><p>So <em>MVVM </em>is basically Microsoft's specialisation of <em>MVC </em>for event driven GUI platforms.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2013-05-17 22:51:33</wp:post_date>
  <wp:post_date_gmt>2013-05-17 22:51:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-mvvm-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="architecture"><![CDATA[architecture]]></category>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[design pattern]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-05-17 22:51:33";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What Hyper-Threading is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/19/what-hyper-threading-is/</link>
  <pubDate>Sun, 19 May 2013 18:11:44 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=99</guid>
  <description/>
  <content:encoded><![CDATA[<p><em>Hyper-Threading </em>is when a single CPU core has multiple associated hardware pipelines e.g. instructions, registers, caches etc. </p><p>Therefore through intelligent scheduling the single core is able to serve multiple concurrent processes with no context switching cost.</p><p>This is especially useful when a process is stalled for a short amount of time i.e. longer than the cycle time of the processor but shorter than a context switch would take.</p><p>It is independent of how many physical CPU cores sit on each processing chip.</p><p> </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2013-05-19 18:11:44</wp:post_date>
  <wp:post_date_gmt>2013-05-19 18:11:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-hyper-threading-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hardware"><![CDATA[hardware]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-05-19 18:11:44";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What Strong Typing is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/20/what-strong-typing-is/</link>
  <pubDate>Mon, 20 May 2013 19:46:52 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=115</guid>
  <description/>
  <content:encoded><![CDATA[<p><em>Strong Typing </em>is when a variable is of a certain type and cannot implicitly be converted to another type to fit some method or operation signature.</p><p><em>Weak Typing </em>(<em>Loose Typing) </em>is the opposite. Values of one type can implicitly be converted to another type to fit some predefined rules.</p><p><br />For example, in JavaScript one could have a single function <strong>func(x)</strong> that could take <em>x </em>as both the value 5 and the string "5". In Java, two overloaded methods would be required for the same functionality, <strong>func(int x) </strong>and <strong>func(string x).</strong><strong> </strong></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>115</wp:post_id>
  <wp:post_date>2013-05-20 19:46:52</wp:post_date>
  <wp:post_date_gmt>2013-05-20 19:46:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-strong-typing-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What the Singleton pattern is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/?p=128</link>
  <pubDate>Wed, 22 May 2013 19:29:41 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=128</guid>
  <description/>
  <content:encoded><![CDATA[<p>The <em>Singleton </em>pattern is a method of ensuring only a single instance of an object is ever created and accessed.</p><p>It's implemented by having an encapsulating class with a private constructor. This class has a static getter, in which it creates the object only if it's the first time it's called and returns it.</p><p>Alternatively the outer class could create the object on creation and return that single same object each time its getter is called.</p><p>The main benefit over a static class is flexibility - none of the restrictions on static classes exist (no interfaces, slower , less reuse, indeterminate constructor behaviour).</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>128</wp:post_id>
  <wp:post_date>2013-05-22 19:29:41</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>What the Singleton pattern is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/22/what-the-singleton-pattern-is/</link>
  <pubDate>Wed, 22 May 2013 19:30:11 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/2013/05/22/what-the-singleton-pattern-is/</guid>
  <description/>
  <content:encoded><![CDATA[The <em>Singleton </em>pattern is a method of ensuring only a single instance of an object is ever created and accessed.

It's implemented by having an encapsulating class with a private constructor. This class has a static getter, in which it creates the object only if it's the first time it's called and returns it.

Alternatively the outer class could create the object on creation and return that single same object each time its getter is called.

The main benefit over a static class is flexibility - none of the restrictions on static classes exist (no interfaces, slower , less reuse, indeterminate constructor behaviour).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>142</wp:post_id>
  <wp:post_date>2013-05-22 19:30:11</wp:post_date>
  <wp:post_date_gmt>2013-05-22 19:30:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-the-singleton-pattern-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>LINQ .First() vs .Single()</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/05/29/linq-first-vs-single/</link>
  <pubDate>Wed, 29 May 2013 20:35:35 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=145</guid>
  <description/>
  <content:encoded><![CDATA[<p>Both methods aim to return the first element of the <em>Enumerable.</em></p><ul><li><em>.First() </em>returns the first element (if there are none, throws an <em><a href="http://msdn.microsoft.com/en-us/library/system.invalidoperationexception.aspx">InvalidOperationException</a>)<br /></em></li><li><em>.Single() </em>returns the first element only if there is exactly one element. Otherwise, if there are none or more than one, throws an <em><a href="http://msdn.microsoft.com/en-us/library/system.invalidoperationexception.aspx">InvalidOperationException</a><br /></em></li></ul><p><em>Single()</em> should be used where possible for clarity.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>145</wp:post_id>
  <wp:post_date>2013-05-29 20:35:35</wp:post_date>
  <wp:post_date_gmt>2013-05-29 20:35:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>linq-first-vs-single</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="linq"><![CDATA[linq]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-05-29 20:35:35";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Concurrency vs. Parallelism</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/06/02/concurrency-vs-parallelism/</link>
  <pubDate>Sun, 02 Jun 2013 21:33:01 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=154</guid>
  <description/>
  <content:encoded><![CDATA[<em>Concurrency </em>is when multiple programs are running within the same time frame - with potential issues arising due to interference. They don't <em>necessarily </em>run at exactly the same time (i.e. on different processors).

<em>Parallelism </em>is when multiple programs run at the exact same point in time, on multiple processors. They don't <em>necessarily </em>have a possibility of interfering with each other, but they could if they're not correctly managed.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>154</wp:post_id>
  <wp:post_date>2013-06-02 21:33:01</wp:post_date>
  <wp:post_date_gmt>2013-06-02 21:33:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>concurrency-vs-parallelism</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>LINQ .Where() vs .Select()</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/06/03/linq-where-vs-select/</link>
  <pubDate>Mon, 03 Jun 2013 20:32:20 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=158</guid>
  <description/>
  <content:encoded><![CDATA[<p>Both <em>.Where() </em>and <em>.Select() </em>operate on an<em> IEnumerable&lt;T&gt;</em>, but they return a different enumerable.</p><ul><li><em>.Where() </em>is a restrictive operator.</li><li>Similarly to the SQL <em>WHERE</em><em> </em>command, it takes data as input and returns a subset. </li><li>It takes as input an <em>IEnumerable&lt;T&gt; </em>(the full input data) and a <em>Func&lt;T, bool&gt; </em>(which decides for each input T, whether it should be in the output or not) and returns an <em>IEnumerable&lt;T&gt; </em>(the subset of items, of the same type).</li><li>It is a filter.</li></ul><ul><li><em>.Select() </em>is a projective operator.</li><li>Similarly to the SQL <em>SELECT </em>command, it takes data as input, does some manipulation on each element, and returns the output.</li><li>It takes as input an <em>IEnumerable&lt;T&gt; </em>(the full input data) and a <em>Func&lt;T, S&gt; </em>(which defines the manipulation which is applied to each element) and returns an <em>IEnumerable&lt;S&gt; </em>(the collection of transformed items, of a possibly different type).</li><li>It is a transformation.</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>158</wp:post_id>
  <wp:post_date>2013-06-03 20:32:20</wp:post_date>
  <wp:post_date_gmt>2013-06-03 20:32:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>linq-where-vs-select</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="linq"><![CDATA[linq]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What Boxing is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/06/04/what-boxing-is/</link>
  <pubDate>Tue, 04 Jun 2013 19:38:57 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=177</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li><em>Boxing </em>is when a primitive type is converted to an object</li><li>The contents is therefore transferred from the stack to the heap</li><li>It is expensive, as a new object must be created</li><li>It is useful when values are used agnostic of type, e.g. a list of strings and ints to be printed</li><li><em>Unboxing </em>is the opposite - bringing this object back into a primitive type</li></ul><pre>int x = 42;<br />Object o = x; // boxing<br />int y = (int) o; // unboxing</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>177</wp:post_id>
  <wp:post_date>2013-06-04 19:38:57</wp:post_date>
  <wp:post_date_gmt>2013-06-04 19:38:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-boxing-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to format a C# number to 2dp</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/?p=190</link>
  <pubDate>Wed, 05 Jun 2013 19:15:52 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=190</guid>
  <description/>
  <content:encoded><![CDATA[<p>Much cleaner than messing about with </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>190</wp:post_id>
  <wp:post_date>2013-06-05 19:15:52</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>What Bunding is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/06/27/what-bunding-is/</link>
  <pubDate>Thu, 27 Jun 2013 20:07:01 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=192</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li>Bundling is the combining of multiple files to be transmitted in one HTTP response.</li><li>It results in fewer HTTP requests and responses.</li><li>The overhead reduction is most effective when large request headers are being transmitted back and forth, e.g. cookies.</li><li>It helps bypass browser limits on the number of concurrent connections.</li><li>It's an ASP.NET 4.5 feature.</li><li>Bundling decreases page load time, network traffic and server load.</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>192</wp:post_id>
  <wp:post_date>2013-06-27 20:07:01</wp:post_date>
  <wp:post_date_gmt>2013-06-27 20:07:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-bunding-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="asp-net"><![CDATA[asp.net]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-06-27 20:07:01";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What the point of a Property is</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/07/17/what-the-point-of-a-property-is/</link>
  <pubDate>Wed, 17 Jul 2013 20:44:02 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=200</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li>A C# property is a convenient way to create getters and setters (<em>accessors</em>).</li><li>They provide a simple way for consumers to access properties about an object e.g. my<em>Circle.Area </em>in comparison to the Java equivalent myCircle.getArea().</li><li>They provide abstraction - the above area may be stored as a single variable (e.g. <em>20) </em>within the object, or may require some calculation (e.g. <em>π x r <sup>2 </sup>). </em>The consumer does not know or care which.<i><br /></i></li><li>Visual Studio shortcut: type "prop" and hit <em>tab </em>to generate the below</li></ul><pre><span style="color:#222222;font-family:'Courier 10 Pitch', Courier, monospace;font-size:13px;line-height:1.5;">public TYPE Type { get; set; }</span></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>200</wp:post_id>
  <wp:post_date>2013-07-17 20:44:02</wp:post_date>
  <wp:post_date_gmt>2013-07-17 20:44:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-the-point-of-a-property-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Weakly vs. Strong Named Assembly</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/07/23/weakly-vs-strong-named-assembly/</link>
  <pubDate>Tue, 23 Jul 2013 19:38:44 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=213</guid>
  <description/>
  <content:encoded><![CDATA[A <em>Weakly</em><em>-Named </em><em>Assembly </em>is an assembly is an assembly which includes the following information:
<ul>
	<li>Name</li>
	<li>Version number</li>
	<li>Culture information (i.e. the <em>locale </em>used for things like date format, calendar etc. e.g. en-gb)</li>
</ul>
A <em>Strongly-Named Assembly </em>is an assembly which in addition to the above, includes:
<ul>
	<li>A signature</li>
	<li>The public key of the signatory</li>
</ul>
This extra information ensures that:
<ul>
	<li>The correct assembly can always be located, even if there happens to be two identically weakly named assemblies (the chances of the authors having the same key pair in addition to naming their assembly identically are negligible).</li>
	<li>Anyone about to run the assembly can check whether the stated author did in fact write and sign the code (assuming their private key has not been compromised).</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>213</wp:post_id>
  <wp:post_date>2013-07-23 19:38:44</wp:post_date>
  <wp:post_date_gmt>2013-07-23 19:38:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>weakly-vs-strong-named-assembly</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="assembly"><![CDATA[Assembly]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-07-23 19:38:44";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What is an assembly</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/07/23/what-is-an-assembly/</link>
  <pubDate>Tue, 23 Jul 2013 19:27:25 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=216</guid>
  <description/>
  <content:encoded><![CDATA[An <em>assembly </em>is a compiled code store. There are two types of assembly, <em>process</em> and <em>library</em>.<em></em>
<h2>Process Assembly (.EXE)</h2>
<ul>
	<li>A <em>process assembly </em>is an EXEcutable piece of code.</li>
	<li>It is designed to be run independently, usually after being clicked on by the user.</li>
	<li>It runs in its own process so has it's own address space.</li>
	<li>It must have a <em>main </em>method as it's single point of entry.</li>
</ul>
<h2>Library Assembly (.DLL)</h2>
<ul>
	<li>A <em>library assembly</em> is a <em>D</em>ynamic <em>L</em>ink <em>L</em>ibrary.</li>
	<li>It is a library of code - a collection of components that is designed to be used by multiple other applications.</li>
	<li>It requires a host process to pick it up and run it inside its own address space.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>216</wp:post_id>
  <wp:post_date>2013-07-23 19:27:25</wp:post_date>
  <wp:post_date_gmt>2013-07-23 19:27:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-is-an-assembly</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="assembly"><![CDATA[Assembly]]></category>
  <category domain="post_tag" nicename="dynamic-link-library"><![CDATA[Dynamic-link library]]></category>
  <category domain="post_tag" nicename="exe"><![CDATA[EXE]]></category>
  <category domain="post_tag" nicename="executable"><![CDATA[Executable]]></category>
  <category domain="category" nicename="os"><![CDATA[OS]]></category>
  <category domain="post_tag" nicename="process-computing"><![CDATA[Process (computing)]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-07-23 19:27:25";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Difference between ref and out</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/07/25/difference-between-ref-and-out/</link>
  <pubDate>Thu, 25 Jul 2013 20:37:22 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=225</guid>
  <description/>
  <content:encoded><![CDATA[<h2>ref</h2>
<ul>
	<li>The <em>ref </em>keyword used in a method signature/call states that the parameter passed to the method is a <em>reference.</em></li>
	<li>Therefore the exact variable passed in can be modified in memory, even if it's a value type (where you would usually only be editing a <strong>copy</strong><em> </em>of the variable).</li>
	<li>The common use is for parsing a value type - when both the value and a success boolean must be returned.</li>
	<li>Example method signature: <em>bool TryParse(ref int x)</em></li>
	<li>Example method call: <em>bool success = TryParse(ref myInt);</em></li>
</ul>
<h2>out</h2>
<ul>
	<li>Using the <em>out </em>keyword instead of <em>ref </em>enforces the constraint that the variable must be initialised inside the method, whether it was previously initialised or not.<i>
</i></li>
	<li>E.g. if TryParse(out myInt) returns, <b>it is guaranteed that myInt has been initialised </b>(even if it returns false).</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>225</wp:post_id>
  <wp:post_date>2013-07-25 20:37:22</wp:post_date>
  <wp:post_date_gmt>2013-07-25 20:37:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>difference-between-ref-and-out</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="out"><![CDATA[out]]></category>
  <category domain="post_tag" nicename="ref"><![CDATA[ref]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11120654722]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>MQ</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/08/06/mq/</link>
  <pubDate>Tue, 06 Aug 2013 21:09:30 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=245</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li><em>MQ </em>is <em>IBM WebSphere MQ</em></li><li><em>MQ </em>stands for <em>Message Queue</em></li><li>It is a high performance, high availability, reliable middleware messaging system</li><li>It has advanced APIs for all common languages as well as REST and SOAP</li><li>It has been around since 1992, known for 10 years as <em>MQSeries</em></li><li>It's main competitors are TIBCO, Informatica, Solace</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>245</wp:post_id>
  <wp:post_date>2013-08-06 21:09:30</wp:post_date>
  <wp:post_date_gmt>2013-08-06 21:09:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mq</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ORM</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/08/13/orm/</link>
  <pubDate>Tue, 13 Aug 2013 20:16:43 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=256</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li><em>ORM stands for</em> <em>Object-Relational Mapping</em></li><li>It is a methodology for relating and translating OOP objects to and from relational database schemas</li><li>The fundamental issue is the incompatibility of the structures used to store data</li><li>OOP languages make comprehensive use of objects with complex and numerous relationships between objects of heterogeneous types</li><li>RDBMS do not make a distinction between the contents of the columns, only the basic relationships (primary key, foreign key) on and between columns</li><li><em>Hibernate</em> (Java) and <em>NHibernate</em> (.NET) are two established frameworks that aim to provide auto generated interfaces into databases </li><li><em>EF (Entity Framework) </em>is the newer Microsoft ORM solution which aims to provide a simpler, developer friendly interface for use within data-oriented applications</li><li>Objects can also be stored directly to the filesystem for easy storage and retrieval without any translation at the cost of performance</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>256</wp:post_id>
  <wp:post_date>2013-08-13 20:16:43</wp:post_date>
  <wp:post_date_gmt>2013-08-13 20:16:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>orm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="database"><![CDATA[database]]></category>
  <category domain="post_tag" nicename="ef"><![CDATA[EF]]></category>
  <category domain="post_tag" nicename="java"><![CDATA[java]]></category>
  <category domain="post_tag" nicename="orm"><![CDATA[ORM]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-08-13 20:16:43";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[paweln66]]></wp:comment_author>
    <wp:comment_author_email>paweln66@op.pl</wp:comment_author_email>
    <wp:comment_author_url>http://paweln66.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>149.156.124.2</wp:comment_author_IP>
    <wp:comment_date>2013-08-14 18:31:22</wp:comment_date>
    <wp:comment_date_gmt>2013-08-14 18:31:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree with you these are a thinks that should know each developer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>21863608</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1376505083.5516560077667236328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"paweln66";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1376505166</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1376505166.522080898284912109375;s:7:"message";s:50:"mrd3v3l0p3r changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:11:"mrd3v3l0p3r";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-08-14 18:31:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[paweln66]]></wp:comment_author>
    <wp:comment_author_email>paweln66@op.pl</wp:comment_author_email>
    <wp:comment_author_url>http://paweln66.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>149.156.124.2</wp:comment_author_IP>
    <wp:comment_date>2013-08-14 20:33:53</wp:comment_date>
    <wp:comment_date_gmt>2013-08-14 20:33:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[*things]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>4</wp:comment_parent>
    <wp:comment_user_id>21863608</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1376512434</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1376512435.42488193511962890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"paweln66";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-08-14 20:33:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Dispose() vs Finalize()</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/08/15/dispose-vs-finalize/</link>
  <pubDate>Thu, 15 Aug 2013 21:30:15 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=288</guid>
  <description/>
  <content:encoded><![CDATA[Both <em>Dispose() </em>and <i>Finalize()</i>:
<ul>
	<li>Should be implemented for objects which hold references to unmanaged resources (file handles, network connections, COM objects etc) to ensure the memory is freed up after use</li>
</ul>
<em>Dispose()</em>
<ul>
	<li>Member of the <em>IDisposable </em>interface</li>
	<li>Should be <em>public</em></li>
	<li>Should be called as soon as the unmanaged resources are no longer required</li>
	<li>Should call its parents <em>Dispose </em>method</li>
	<li>Should be callable multiple times</li>
	<li>Should call <em>GC.SuppressFinalize(this) </em>to ensure the expensive (and now redundant) <em>Finalize </em>method is not called later</li>
	<li>Is the method called at the end of a <em>using </em>statement</li>
</ul>
<em>Finalize()</em>
<ul>
	<li>Should be <em>protected</em></li>
	<li>Should only be used by the <em>Garbage Collector </em>as a backup, in case the <em>Dispose </em>method isn't called</li>
	<li>Should call it's parents <em>Finalize </em>method</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>288</wp:post_id>
  <wp:post_date>2013-08-15 21:30:15</wp:post_date>
  <wp:post_date_gmt>2013-08-15 21:30:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dispose-vs-finalize</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="dispose"><![CDATA[Dispose]]></category>
  <category domain="post_tag" nicename="finalize"><![CDATA[Finalize]]></category>
  <category domain="post_tag" nicename="gc"><![CDATA[GC]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Sealed modifier</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/08/18/sealed-modifier/</link>
  <pubDate>Sun, 18 Aug 2013 08:13:07 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=310</guid>
  <description/>
  <content:encoded><![CDATA[<p>The <em>sealed </em>modifier is used to stop classes further down an object hierarchy from overriding implementations</p><ul><li>It can be used on classes, methods and properties</li><li><em>Sealed </em>methods and properties must also be declared <em>override </em>and override a <em>virtual </em>method or property</li><li>You may <em>seal </em>an entire base class, but not methods or properties within a base class (as they need to <em>override </em>a <em>virtual </em>member)</li><li><em>Sealing </em>an <em>abstract </em>would make it unusable and results in an error</li><li>Error <em>CS0239 </em>will be thrown at compile time if you attempt to override a sealed member</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>310</wp:post_id>
  <wp:post_date>2013-08-18 08:13:07</wp:post_date>
  <wp:post_date_gmt>2013-08-18 08:13:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sealed-modifier</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="inheritance"><![CDATA[inheritance]]></category>
  <category domain="post_tag" nicename="sealed"><![CDATA[sealed]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>var vs. dynamic </title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/08/30/var-vs-dynamic/</link>
  <pubDate>Fri, 30 Aug 2013 22:14:44 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=328</guid>
  <description/>
  <content:encoded><![CDATA[Both <i>var </i>and <i>dynamic </i>can be used to declare an object of undefined type.

<i>var</i>
<ul>
	<li>Is implicitly<em> strongly typed</em> - the variable is truly of one single type and cannot be anything else.</li>
	<li>Is <em>statically bound</em> - bound to a type at compile time.</li>
	<li>Compiles to exactly the same code as if it was explicitly typed.</li>
	<li>Is <em>type safe </em>- operations are checked at run time to ensure they are available to be performed on the specific type</li>
</ul>
<i>
dynamic</i>
<ul>
	<li>Is implicitly <em>weakly typed </em>- it can become an object of any type, determined only at run time.</li>
	<li>Is <em>dynamically bound</em> - bound to a type at run time.</li>
	<li>Compiles to complex <em>dynamic code</em>, with a subsequent run time performance hit.</li>
	<li>Is not <em>type safe </em>- operations cannot be checked until run time as only then is the type determined.</li>
	<li>It differs from the <em>Object </em>type in that it is (eventually) bound to a type - no casts are required to call methods.</li>
</ul>
So <em>var </em>is a useful time saver when you don't know or care which type a variable will be. <em>dynamic </em>is a more complex tool for when it cannot be known which type it will be until run time.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>328</wp:post_id>
  <wp:post_date>2013-08-30 22:14:44</wp:post_date>
  <wp:post_date_gmt>2013-08-30 22:14:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>var-vs-dynamic</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="dynamic"><![CDATA[dynamic]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"49512893";s:7:"blog_id";s:8:"51413643";s:9:"mod_stamp";s:19:"2013-08-30 22:14:44";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Namespaces</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2013/10/28/namespaces/</link>
  <pubDate>Mon, 28 Oct 2013 21:58:35 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=353</guid>
  <description/>
  <content:encoded><![CDATA[A namespace is a high level way of defining <em>scope</em>
<ul>
	<li>Namespaces implicitly always have public scope</li>
	<li>Everything within a namespace must have a unique name so this name, together with the namespace, unambiguously identifies it</li>
	<li>Namespaces can be nested</li>
	<li>The <em>using </em>keyword imports a namespace for use without explicitely prepending it</li>
	<li><em>Aliases </em>can be given to namespaces for clarity e.g. <strong>using Comms = Provider.Project.CommunicationLayer</strong></li>
	<li>If something like a locally scoped class is hiding the desired namespace, the <em>global </em>keyword can be used to reference the root namespace e.g. <strong>global::System.Console.WriteLine("hello")</strong></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>353</wp:post_id>
  <wp:post_date>2013-10-28 21:58:35</wp:post_date>
  <wp:post_date_gmt>2013-10-28 21:58:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>namespaces</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="namespace"><![CDATA[namespace]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>volatile</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/02/25/volatile/</link>
  <pubDate>Tue, 25 Feb 2014 21:54:45 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=373</guid>
  <description/>
  <content:encoded><![CDATA[The <em>volatile access modifier </em>is used to tell the compiler that a field is accessed by multiple threads.
<ul>
	<li>It stops the compiler from performing any optimisations that may cause unpredictable behaviour in a multi threaded execution</li>
	<li>For example, if a piece of code isn't setting the value of a field, the compiler might decide to keep the value cached in a register. But another thread may be running a separate piece of code which writes to this field.</li>
	<li><em>volatile </em>does not make the field thread safe, and race conditions can still occur if no mutex technique is implemented between threads.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>373</wp:post_id>
  <wp:post_date>2014-02-25 21:54:45</wp:post_date>
  <wp:post_date_gmt>2014-02-25 21:54:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>volatile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Referential Transparency</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/03/29/referential-transparency/</link>
  <pubDate>Sat, 29 Mar 2014 08:06:24 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=376</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li>aka Referential Opacity</li><li>A reference <em>e.g. to a method user.Logon()</em> is transparent if it can be replaced with its value <em>e.g. the method body of Logon()</em> without altering the output</li><li>Requires there to be no implicit state</li><li>Is the standard in most functional languages</li><li>Aids consistency and comprehension across a large project</li><li>It’s often a requirement for optimisation techniques such as parallelisation and lazy evaluation </li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>376</wp:post_id>
  <wp:post_date>2014-03-29 08:06:24</wp:post_date>
  <wp:post_date_gmt>2014-03-29 08:06:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>referential-transparency</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="references"><![CDATA[references]]></category>
  <category domain="post_tag" nicename="referential-transparency"><![CDATA[Referential Transparency]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Common Language Infrastructure (CLI)</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/03/30/common-language-infrastructure-cli/</link>
  <pubDate>Sun, 30 Mar 2014 18:38:42 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=379</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li>Standard created by Microsoft in 2001</li><li>Defines the actions and formats which take shape after compilation</li><li>Defines standard data types, operations, metadata etc</li><li>Defines how compiled code (IL) is transformed to executable code</li><li>Ensures that any language (e.g. C#, VB.NET etc. or any new language), once compiled into IL, can be passed to the appropriate CLI for the desired platform and run</li><li>The CLR is Microsoft’s main commercial implementation</li><li>Other implementations are Mono, Silverlight, Portable.NET</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>379</wp:post_id>
  <wp:post_date>2014-03-30 18:38:42</wp:post_date>
  <wp:post_date_gmt>2014-03-30 18:38:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>common-language-infrastructure-cli</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="cli"><![CDATA[cli]]></category>
  <category domain="post_tag" nicename="clr"><![CDATA[clr]]></category>
  <category domain="post_tag" nicename="il"><![CDATA[il]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Common Language Infrastructure (CLI)</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/?p=381</link>
  <pubDate>Sun, 30 Mar 2014 19:01:21 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=381</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>381</wp:post_id>
  <wp:post_date>2014-03-30 19:01:21</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Benefits of Powershell</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/04/01/benefits-of-powershell/</link>
  <pubDate>Tue, 01 Apr 2014 18:51:44 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=384</guid>
  <description/>
  <content:encoded><![CDATA[<p>Powershell (PoSH) is Microsoft’s new shell and scripting language</p><ul><li>Easily discoverable and consistent due to the Verb-Noun structure (e.g. <em>Invoke-WebRequest</em>) with fixed list of verbs (<em>Get-Verb</em> to view them)</li><li>Microsoft’s strategic solution going forward, with modules available for components such as ISS, Windows Update, Azure etc. as well as external applications like Facebook</li><li>Works using an object pipeline with named fields, instead of just passing pure text between functions</li><li>Includes whatif functionality to view the output of a command without actually executing it</li><li>Includes shortcut commands and default unnamed parameters </li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>384</wp:post_id>
  <wp:post_date>2014-04-01 18:51:44</wp:post_date>
  <wp:post_date_gmt>2014-04-01 18:51:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>benefits-of-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Command Query Separation (CQS)</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/05/04/command-query-separation-cqs/</link>
  <pubDate>Sun, 04 May 2014 15:00:20 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=386</guid>
  <description/>
  <content:encoded><![CDATA[Logical separation of methods on an object into either a <em>command </em>or a <em>query</em>.

<em>Command</em>
<ul>
	<li>Performs an action</li>
	<li>Changes some <em>externally observable</em> state</li>
	<li>Does not return a value</li>
</ul>
<em>Query</em>
<ul>
	<li>Queries and returns a value to the caller</li>
	<li>Does not affecting any <em>externally observable</em> state</li>
	<li>Must be referentially transparent</li>
	<li>Has no side effects and therefore calls can be added, removed or re-ordered without affecting the output</li>
</ul>
&nbsp;
<ul>
	<li>“Asking a question does not change the answer”</li>
	<li>Enforces separation of concerns</li>
	<li>Any kind of query logging or metric generation becomes impossible</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>386</wp:post_id>
  <wp:post_date>2014-05-04 15:00:20</wp:post_date>
  <wp:post_date_gmt>2014-05-04 15:00:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>command-query-separation-cqs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="referentially-transparent"><![CDATA[referentially transparent]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[49512893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Law of Demeter</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/07/17/law-of-demeter/</link>
  <pubDate>Thu, 17 Jul 2014 18:59:32 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/2014/07/17/law-of-demeter/</guid>
  <description/>
  <content:encoded><![CDATA[<ul><li>aka The Principal of Least Knowledge</li><li>Give clients exactly what they asked for, not some object they can use to query what they want</li><li>Tenet of loose coupling</li><li>Classes only know about the neighbours, and don't have to talk to strangers</li><li>Results in less brittle, more maintainable and adaptable code</li><li>But, quickly results in bloat, as each type/method in a chain needs to marshal values to/from their neighbours</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>391</wp:post_id>
  <wp:post_date>2014-07-17 18:59:32</wp:post_date>
  <wp:post_date_gmt>2014-07-17 18:59:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>law-of-demeter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Default empty delegate “no-op” event</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/09/22/default-empty-delegate-no-op-event/</link>
  <pubDate>Mon, 22 Sep 2014 19:55:36 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=392</guid>
  <description/>
  <content:encoded><![CDATA[Assigning a default empty delegate to an event on declaration like so
<pre>public event EventHandler FooEvent = delegate { };</pre>
+ Cannot cause a NullReferenceException by doing FooEvent(sender, args), as always at least one event subscriber

+ No need for null check, which makes code intent clearer

- Uses extra memory to create this empty event handler which is always called but never does anything useful

- Bypasses well known code pattern, which may confuse people later
<pre><span style="color:#222222;font-family:'Courier 10 Pitch', Courier, monospace;font-size:13px;line-height:1.5;">if (FooEvent != null)

{

    FooEvent(this, BarArgs);

}</span></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>392</wp:post_id>
  <wp:post_date>2014-09-22 19:55:36</wp:post_date>
  <wp:post_date_gmt>2014-09-22 19:55:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>default-empty-delegate-no-op-event</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="delegate"><![CDATA[delegate]]></category>
  <category domain="post_tag" nicename="event"><![CDATA[event]]></category>
  <category domain="post_tag" nicename="no-op"><![CDATA[no-op]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Rx ReplaySubject</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/12/13/rx-replaysubject/</link>
  <pubDate>Sat, 13 Dec 2014 11:04:14 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=397</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li><em>ReplaySubject</em> is a <em>Subject</em> with memory</li>
	<li>It can have temporal or spacial memory:
<ul>
	<li>Construct it with an <em>int</em> and it will have a buffer of that size</li>
	<li>Constuct it with a <em>TimeSpan </em>and it will have a buffer of that duration</li>
	<li>Construct it with both and it will have both</li>
</ul>
</li>
	<li>It's main use is when publishes occur before subscriptions, and some history is required</li>
	<li><em>ReplaySubject(1)</em> can be used to pass in a dependency as <em>IObservable&lt;FooDependency&gt;</em>
<ul>
	<li>Useful when the creation of <em>FooDependency</em> is potentially long running</li>
	<li>And when useful work can be done without <em>FooDependency</em> (e.g. bring up a UI or load other modules</li>
</ul>
</li>
</ul>
<h6 class="title"><a href="http://msdn.microsoft.com/en-us/library/hh211810%28v=vs.103%29.aspx">ReplaySubject&lt;<span class="typeparameter">T</span>&gt; Class</a></h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>397</wp:post_id>
  <wp:post_date>2014-12-13 11:04:14</wp:post_date>
  <wp:post_date_gmt>2014-12-13 11:04:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rx-replaysubject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="rx"><![CDATA[rx]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Command Query Responsibility Separation (CQRS)</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2014/12/27/command-query-responsibility-separation-cqrs/</link>
  <pubDate>Sat, 27 Dec 2014 20:04:36 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">http://thingsishouldknowasadeveloper.wordpress.com/?p=400</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li><em>CQRS</em> is an advancement of <em>CQS</em> (where there is a clear definition between which methods are commands and which are queries on an object)</li>
	<li>In <em>CQRS</em>, there exists a <em>Query Model</em>, for reading data (e.g. from a database or API) and a <em>Command Model</em> for executing actions (e.g. creating entities or applying actions to them)</li>
	<li><em>CQRS</em> reduces system complexity by separating code along a clearly defined responsibility line (although in reality often just the highest level interfaces have this split evident, and common components are re-used across the models)</li>
	<li>Query objects can be cached as they are read only (e.g. In a <em>Reporting Database</em>)</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>400</wp:post_id>
  <wp:post_date>2014-12-27 20:04:36</wp:post_date>
  <wp:post_date_gmt>2014-12-27 20:04:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>command-query-responsibility-separation-cqrs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[design pattern]]></category>
  <category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Covariance vs. Contravariance</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/01/20/covariance-vs-contravariance/</link>
  <pubDate>Tue, 20 Jan 2015 20:52:49 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=402</guid>
  <description/>
  <content:encoded><![CDATA[Covariance and Contravariance are two dual concepts, which enable implicit type assignment for arrays, delegates and generic type arguments.
<ul>
	<li>Covariance is when a type can be replaced by a less derived type</li>
	<li>The <em>out </em>keyword on a type parameter denotes a covariant type e.g. IEnumerable&lt;out T&gt;</li>
	<li>An IEnumerable&lt;string&gt; <em>out</em>puts a string, which can be assigned to an object reference, as a string is an object</li>
</ul>
<ul>
	<li>Contravariance is when a type can be replaced by a more derived type</li>
	<li>The <em>in </em>keyword on a type parameter denotes a contravariant type e.g. Action&lt;in T&gt;</li>
	<li>An Action&lt;object&gt; takes an object as in <em>in</em>put, so it will happily take a string reference, as a string is an object</li>
</ul>
<h6><a title="Covariance and Contravariance (C# and Visual Basic)" href="http://msdn.microsoft.com/en-GB/library/ee207183.aspx">Covariance and Contravariance (C# and Visual Basic)</a></h6>
<h6><a title="IEnumerable&lt;T&gt; Interface" href="http://msdn.microsoft.com/en-us/library/9eekhta0%28v=vs.110%29.aspx">IEnumerable&lt;<span class="typeparameter">T</span>&gt; Interface</a></h6>
<h6><a title="Action&lt;T&gt; Delegate" href="http://msdn.microsoft.com/en-us/library/018hxwa8%28v=vs.110%29.aspx">Action&lt;<span class="typeparameter">T</span>&gt; Delegate</a></h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>402</wp:post_id>
  <wp:post_date>2015-01-20 20:52:49</wp:post_date>
  <wp:post_date_gmt>2015-01-20 20:52:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>covariance-vs-contravariance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Rx .Switch()</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/02/18/rx-switch/</link>
  <pubDate>Wed, 18 Feb 2015 22:18:09 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=407</guid>
  <description/>
  <content:encoded><![CDATA[<pre>public static IObservable&lt;TSource&gt; Switch&lt;TSource&gt;(this IObservable&lt;IObservable&lt;TSource&gt;&gt; sources)</pre>
<ul>
	<li><em>Switch</em> is a method of stream combination – it takes a stream of streams, and makes sure to return only the values from the most recent stream</li>
	<li>Any previous streams subscriptions are disposed of</li>
	<li>Useful for when we know a stream will become out of date, and we don’t care about the old stream values</li>
	<li>GUI example is if we have a stream of the currently selected value in a dropdown, from which we subscribe to a relevant stream of data to populate a window. Once a new value is selected in the dropdown, we want to subscribe to data for the new value, and don’t care about any streams we subscribed to off the back of the previous selection</li>
</ul>
<pre>IObsevable&lt;DropdownValue&gt; dropdownStream = ...;
dropdownStream.Select(selectedDropdownValue =&gt; GetWindowDataStream(selectedDropdownVale))
              .Switch()
              .Subscribe(windowData =&gt; PopulateGUI(windowData));</pre>
<ul>
	<li>The above code ensures we're always subscribed to window data for the latest selected dropdown value, and nothing else</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>407</wp:post_id>
  <wp:post_date>2015-02-18 22:18:09</wp:post_date>
  <wp:post_date_gmt>2015-02-18 22:18:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rx-switch</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="rx"><![CDATA[rx]]></category>
  <category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>BAML (Binary Application Markup Language)</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/02/21/baml-binary-application-markup-language/</link>
  <pubDate>Sat, 21 Feb 2015 21:39:55 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=410</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li>Parsed, tokenised, binary encoding of XAML</li>
	<li>Compressed and faster to load and parse than XAML</li>
	<li>Gets embedded in the program assembly as a binary resource</li>
	<li>Can be decompiled back into XAML by constructing a graph of live object instances, and serialising these to XAML</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>410</wp:post_id>
  <wp:post_date>2015-02-21 21:39:55</wp:post_date>
  <wp:post_date_gmt>2015-02-21 21:39:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>baml-binary-application-markup-language</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="baml"><![CDATA[baml]]></category>
  <category domain="category" nicename="wpf"><![CDATA[wpf]]></category>
  <category domain="category" nicename="xaml"><![CDATA[xaml]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>WPF Logical vs. Visual Trees</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/04/04/wpf-logical-vs-visual-trees/</link>
  <pubDate>Sat, 04 Apr 2015 17:26:28 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=412</guid>
  <description/>
  <content:encoded><![CDATA[<h2><strong>Logical Tree</strong></h2>
<ul>
	<li>Hierarchy of elements, usually defined in XAML (though can also be defined procedurally)</li>
	<li>Excluding the visual elements provides a powerful abstraction:
<ul>
	<li>Data oriented operations can be performed simply and quickly (e.g. only <em>logical</em> ancestors are searched for inherited resource definitions)</li>
	<li>Developers can focus on the layout of elements and data and leave the visuals until later, or hand over to a pure UI developer</li>
</ul>
</li>
</ul>
<h2><strong>Visual Tree</strong></h2>
<ul>
	<li>Hierarchy of elements that actually get rendered</li>
	<li>Only logical elements which derive from <em>Visual</em> (or <em>Visual3D</em>) appear in the visual tree</li>
	<li>Usually only concerned with the visual tree when dealing with restyling (WPF's look vs. logic separation)</li>
	<li>Routed events traverse over the visual tree</li>
</ul>
<h2><strong>Example</strong></h2>
A textual <em>Label</em> and textual <em>ListBoxItem</em> are distinct logical tree items, but have the same visual tree components.

Border -&gt; ContentPresenter -&gt; TextBox

Though each logical element will have different default property values.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>412</wp:post_id>
  <wp:post_date>2015-04-04 17:26:28</wp:post_date>
  <wp:post_date_gmt>2015-04-04 17:26:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wpf-logical-vs-visual-trees</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="logical-tree"><![CDATA[logical tree]]></category>
  <category domain="post_tag" nicename="visual-tree"><![CDATA[visual tree]]></category>
  <category domain="category" nicename="wpf"><![CDATA[wpf]]></category>
  <category domain="post_tag" nicename="xaml"><![CDATA[xaml]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>WPF Class Hierarchy</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/04/05/wpf-class-hierarchy/</link>
  <pubDate>Sun, 05 Apr 2015 07:49:25 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=418</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://thingsishouldknowasadeveloper.files.wordpress.com/2015/04/wpf-hier.png"><img class=" size-full wp-image-419 aligncenter" src="https://thingsishouldknowasadeveloper.files.wordpress.com/2015/04/wpf-hier.png" alt="wpf hier" width="660" height="347" /></a>
<h2><span style="color:#808080;"><strong>Object</strong> </span></h2>
<ul>
	<li>Standard .NET object base class. The only non WPF specific class in the hierarchy</li>
</ul>
<h2><span style="color:#ff6600;"><strong>DispatcherObject</strong></span></h2>
<ul>
	<li>Thread Affinity - Only the thread that created the object (i.e. the <em>Dispatcher</em>) can access it directly</li>
</ul>
<h2><span style="color:#ff6600;"><strong>DependencyObject</strong></span></h2>
<ul>
	<li>Supports <em>Dependency Properties </em></li>
	<li>Provides <em>GetValue</em> and <em>SetValue</em> methods</li>
</ul>
<h2><span style="color:#800080;"><strong>Freezable </strong></span></h2>
<ul>
	<li>Provides the method <em>Freeze</em> to transition the object into an immutable</li>
	<li>Frozen objects do not need to spend resources on change notifications (which can be expensive for graphical objects containing unmanaged resources)</li>
	<li>Frozen objects can be accessed across threads</li>
	<li>Frozen objects can be copied without regenerating low level unmanaged objects</li>
</ul>
<h2><span style="color:#3366ff;"><strong>Visual</strong></span></h2>
<ul>
	<li>Has 2D visual rendering support</li>
	<li>Appears in the visual tree</li>
</ul>
<h2><span style="color:#3366ff;"><strong>UIElement </strong></span></h2>
<ul>
	<li>Defines nearly 100 UI events</li>
	<li>Provides command, input binding and focus support</li>
	<li>Contains layout logic</li>
</ul>
<h2><span style="color:#3366ff;"><strong>FrameworkElement</strong></span></h2>
<ul>
	<li>Builds WPF framework-level capabilities</li>
	<li>Adds support for styling, data binding, resources, tooltips and context menus</li>
</ul>
<h2><span style="color:#3366ff;"><strong>Control </strong></span></h2>
<ul>
	<li>Defines little behaviour, but is the ancestor of all controls - <em>Button</em>, <em>ComboBox </em>etc</li>
	<li>Maintains a <em>ControlTemplate</em> in the <em>Template</em> property which defines appearance</li>
</ul>
<h2><span style="color:#99cc00;"><strong>ContentElement </strong></span></h2>
<ul>
	<li>Provides similar support as <em>UIElement</em> for inputs, focus, events etc.</li>
	<li>But doesn't provide its own rendering behaviour</li>
</ul>
<h2><span style="color:#99cc00;"><strong>FrameworkContentElement</strong>.</span></h2>
<ul>
	<li>Provides similar support as <em>FrameworkElement</em> for WPF framework-level capabilities (binding, tooltips, context menus etc)</li>
	<li>But doesn't participate in layout or rendering - must be used in a <em>Visual </em>object's content</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>418</wp:post_id>
  <wp:post_date>2015-04-05 07:49:25</wp:post_date>
  <wp:post_date_gmt>2015-04-05 07:49:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wpf-class-hierarchy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
  <category domain="post_tag" nicename="contentelement"><![CDATA[ContentElement]]></category>
  <category domain="post_tag" nicename="control"><![CDATA[Control]]></category>
  <category domain="post_tag" nicename="dependencyobject"><![CDATA[DependencyObject]]></category>
  <category domain="post_tag" nicename="dispatcherobject"><![CDATA[DispatcherObject]]></category>
  <category domain="post_tag" nicename="frameworkcontentelement"><![CDATA[FrameworkContentElement]]></category>
  <category domain="post_tag" nicename="frameworkelement"><![CDATA[FrameworkElement]]></category>
  <category domain="post_tag" nicename="freezable"><![CDATA[Freezable]]></category>
  <category domain="post_tag" nicename="uielement"><![CDATA[UIElement]]></category>
  <category domain="post_tag" nicename="visual"><![CDATA[Visual]]></category>
  <category domain="category" nicename="wpf"><![CDATA[wpf]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Dependency Properties</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/04/17/dependency-properties/</link>
  <pubDate>Fri, 17 Apr 2015 04:47:05 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=433</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li>Only <em>DependencyProperty</em>s can be the target of binding (anything can be the source)</li>
	<li>Static and sparely stored to save memory compared with if they were instance properties (as they are usually mostly set to their default value anyway)</li>
	<li>.NET property wrappers are not called at runtime (but can be bound to at compile time), so any logic in getter/setter will be ignored</li>
	<li>Provides useful functionality which can be utilised through the <em>PropertyMetadata</em> (default value and property changed callback)</li>
	<li>Property Triggers (e.g. set background on mouse over) can only be used against Dependency Properties. (Data triggers can use .NET properties)</li>
	<li>Setting <em>FrameworkPropertyMetadataOptions.Inherits</em> on <em>Register</em> means the value of the property will be inherited by children</li>
	<li><em>ClearValue</em> can be used to clear the local values</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>433</wp:post_id>
  <wp:post_date>2015-04-17 04:47:05</wp:post_date>
  <wp:post_date_gmt>2015-04-17 04:47:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dependency-properties</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="dependencyproperty"><![CDATA[dependencyproperty]]></category>
  <category domain="category" nicename="wpf"><![CDATA[wpf]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Static vs dynamic resources</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/04/24/static-vs-dynamic-resources/</link>
  <pubDate>Fri, 24 Apr 2015 05:54:14 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=438</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Static</h2> <ul> <li>Always loaded on window/page load (even if not used)</li> <li>Only ever loaded once</li> <li>No forward referencing - must be declared above where it is used</li></ul> <h2>Dynamic</h2> <ul> <li>Not loaded on window/page load (can improve start up time) </li> <li>Reloaded each time the resource is changed (overhead to watch for changes)</li> <li>Can only be used to set dependency properties</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>438</wp:post_id>
  <wp:post_date>2015-04-24 05:54:14</wp:post_date>
  <wp:post_date_gmt>2015-04-24 05:54:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>static-vs-dynamic-resources</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="wpf"><![CDATA[wpf]]></category>
  <category domain="post_tag" nicename="xaml"><![CDATA[xaml]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Javascript Object Literal</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/04/27/javascript-object-literal/</link>
  <pubDate>Mon, 27 Apr 2015 06:25:17 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=440</guid>
  <description/>
  <content:encoded><![CDATA[<div id="page" class="hfeed">
<div id="main">
<div id="primary">
<div id="content">
<div class="entry-content">
<div id="547dc9dd-291c-481a-9d28-2c04407f0394" class="postBody" style="margin:4px 0 0;border-width:0;padding:0;">
<ul>
	<li style="text-align:left;">Comma separated list of name-value pairs surrounded by curly braces</li>
	<li style="text-align:left;">Encapsulates data in an object</li>
</ul>
<pre>var person = {
    name : "Jim", 
    age: 100
};</pre>
<ul style="text-align:left;">
	<li>Can contain array literals, functions or nested object literals</li>
	<li>Empty objects can also be created with</li>
</ul>
<pre>var empty = { };</pre>
<p style="text-align:left;">which is identical to var empty = new Object()</p>

<ul>
	<li style="text-align:left;">Usually accessed using dot notation (<i>person.name</i>), but can also be accessed with bracket notation (<i>person[‘name’]</i>)</li>
	<li style="text-align:left;">Bracket notation must be used to accessfor non-standard identifier names (e.g. ‘!’, ‘’)</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>440</wp:post_id>
  <wp:post_date>2015-04-27 06:25:17</wp:post_date>
  <wp:post_date_gmt>2015-04-27 06:25:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>javascript-object-literal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="object-literal"><![CDATA[object literal]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>CSS Positioning</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/04/27/css-positioning/</link>
  <pubDate>Mon, 27 Apr 2015 20:06:37 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=443</guid>
  <description/>
  <content:encoded><![CDATA[Fixed
<ul>
	<li>Doesn’t participate in document flow (0 height, 0 width)</li>
	<li>Fixed position on screen, even after scrolling</li>
	<li>Actually a special case of absolute, but relative to the viewport</li>
</ul>
Absolute
<ul>
	<li>Doesn’t participate in document flow (0 height, 0 width)</li>
	<li>Fixed position on initial screen layout, can be scrolled away</li>
	<li>Will be relative to the closest parent who has a position of absolute, fixed or relative (or the window if none)</li>
</ul>
Relative
<ul>
	<li>Maintains height and width in original position</li>
	<li>Positioned according to itself (e.g. <em>top: 10px</em> is 10px from the top of the original position, not the container)</li>
</ul>
Static
<ul>
	<li>Default behaviour of elements</li>
	<li>Laid out according to normal flow (i.e. “not positioned”)</li>
	<li>Position properties (top, bottom, left, right) don’t have any effect</li>
</ul>
Inherit
<ul>
	<li>Inherits positioning from its (direct) parent element</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>443</wp:post_id>
  <wp:post_date>2015-04-27 20:06:37</wp:post_date>
  <wp:post_date_gmt>2015-04-27 20:06:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>css-positioning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="css"><![CDATA[css]]></category>
  <category domain="post_tag" nicename="html"><![CDATA[html]]></category>
  <category domain="category" nicename="web"><![CDATA[web]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>User Control vs Custom Control</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/05/28/user-control-vs-custom-control/</link>
  <pubDate>Thu, 28 May 2015 17:50:38 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=445</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Custom Control</h2>
<ul>
	<li>Extends or creates an entirely custom, usually complex, control</li>
	<li>Derives from <em>Control</em> or any of its subclasses</li>
	<li>Usually has a pluggable interface</li>
	<li>Usually defined in C# with a style inside the theme resource dictionary</li>
	<li>Includes implementation and usually default template interface and style, but expected to be changed/skinned on by consumer</li>
</ul>
<h2> User Control</h2>
<ul>
	<li>Combines existing controls into a reusable composite control for a specific purpose</li>
	<li>Derives from <em>UserControl</em></li>
	<li>Technically a type of custom control</li>
	<li>Usually defined in xaml with code behind</li>
	<li>Includes predefined interface and style which isn't expected to be adjusted</li>
	<li>Example <a href="https://github.com/tsasioglu/Escape-Pod/blob/master/EscapePod/Controls/SymbolButton.xaml">https://github.com/tsasioglu/Escape-Pod/blob/master/EscapePod/Controls/SymbolButton.xaml</a></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>445</wp:post_id>
  <wp:post_date>2015-05-28 17:50:38</wp:post_date>
  <wp:post_date_gmt>2015-05-28 17:50:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>user-control-vs-custom-control</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="custom-control"><![CDATA[custom control]]></category>
  <category domain="post_tag" nicename="user-control"><![CDATA[user control]]></category>
  <category domain="category" nicename="wpf"><![CDATA[wpf]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd2a9aad2f748168267e4933143222ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11103967115]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Python's enumerate</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/07/28/pythons-enumerate/</link>
  <pubDate>Tue, 28 Jul 2015 20:05:16 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=448</guid>
  <description/>
  <content:encoded><![CDATA[<pre><tt class="descname">enumerate</tt><big>(</big><em>sequence</em>, <em>start=0</em><big>)</big></pre>
<ul>
	<li>Takes as input a <em>sequence</em> (string, unicode string, list, tuple, bytearray, buffer or xrange) or iterable, and an arbitrary <em>start</em> index</li>
	<li>Returns an iterator which provides tuples containing the count and value</li>
	<li>Useful to generate the index corresponding to each element:</li>
</ul>
<pre>for i, animal in enumerate(["cat", "dog", "mouse"], 1):
    print("Animal #{} is a {}".format(i, animal))</pre>
<h6><a href="https://www.python.org/dev/peps/pep-0279/">PEP 279 -- The enumerate() built-in function</a></h6>
<h6><a href="https://docs.python.org/2/library/functions.html#enumerate">enumerate(sequence, start=0)</a></h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>448</wp:post_id>
  <wp:post_date>2015-07-28 20:05:16</wp:post_date>
  <wp:post_date_gmt>2015-07-28 20:05:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pythons-enumerate</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13181655702]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Enable MySQL server query logging</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2015/11/08/enable-mysql-server-query-logging/</link>
  <pubDate>Sun, 08 Nov 2015 12:06:55 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=451</guid>
  <description/>
  <content:encoded><![CDATA[<ol>
	<li>View current state of variables:
<pre>SHOW VARIABLES LIKE "general_log%";</pre>
</li>
	<li>Set log location:
<pre>SET GLOBAL general_log_file = 'C:/Temp/QueryLog.log';</pre>
</li>
	<li>Enable logging:
<pre>SET GLOBAL general_log = 'ON';</pre>
</li>
	<li>Disable logging again (for improved database performance and disk usage):
<pre>SET GLOBAL general_log = 'OFF';</pre>
</li>
</ol>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>451</wp:post_id>
  <wp:post_date>2015-11-08 12:06:55</wp:post_date>
  <wp:post_date_gmt>2015-11-08 12:06:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>enable-mysql-server-query-logging</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="database"><![CDATA[database]]></category>
  <category domain="post_tag" nicename="logging"><![CDATA[logging]]></category>
  <category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
  <category domain="category" nicename="sql"><![CDATA[sql]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16651130444]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ConcurrentDictionary.GetOrAdd() facts</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/05/07/concurrentdictionary-getoradd-facts/</link>
  <pubDate>Sun, 07 May 2017 19:41:09 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=454</guid>
  <description/>
  <content:encoded><![CDATA[In any combination of any number of threads running for any values with the same key:
<ul>
	<li>It is guaranteed that only one item will be added
<ul>
	<li>and this will be the only call to which true is returned.</li>
</ul>
</li>
	<li>It is <strong>not</strong> guaranteed that the delegate overload will only execute the delegate once
<ul>
	<li>because the class uses optimistic concurrency control.</li>
	<li>The implicit assumption is that it's rare for multiple concurrent calls to occur in reality, so more efficient to compute anyway, then replace or throw away as appropriate.</li>
	<li>If the delegate is expensive or has unwanted side effects, a Lazy&lt;&gt; can be used instead.</li>
</ul>
</li>
</ul>
<a href="https://msdn.microsoft.com/en-us/library/ee378676%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">ConcurrentDictionary.GetOrAdd()</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>454</wp:post_id>
  <wp:post_date>2017-05-07 19:41:09</wp:post_date>
  <wp:post_date_gmt>2017-05-07 19:41:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>concurrentdictionary-getoradd-facts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[4800338767]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Culture aware DateTime formatting</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/05/28/culture-aware-datetime-formatting/</link>
  <pubDate>Sun, 28 May 2017 04:18:51 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=475</guid>
  <description/>
  <content:encoded><![CDATA[There are various <em>DateTime.ToString()</em> format specifiers which are culture aware, which can be very useful to show the date in a native format, e.g. Christmas day 2017
<table>
<tbody>
<tr>
<th>Culture</th>
<th>ToString("d")</th>
<th>ToString("g")</th>
</tr>
<tr>
<td>en-GB</td>
<td>25/12/2017</td>
<td>25/12/2017 00:00</td>
</tr>
<tr>
<td>en-US</td>
<td>12/25/2017</td>
<td>12/25/2017 12:00 AM</td>
</tr>
<tr>
<td>en-CA</td>
<td>2017-12-25</td>
<td>2017-12-25 12:00 AM</td>
</tr>
</tbody>
</table>
However, note the 'official' format isn't always that most used by the people - see <em>en-CA</em> above.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>475</wp:post_id>
  <wp:post_date>2017-05-28 04:18:51</wp:post_date>
  <wp:post_date_gmt>2017-05-28 04:18:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>culture-aware-datetime-formatting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="culture"><![CDATA[culture]]></category>
  <category domain="post_tag" nicename="datetime"><![CDATA[datetime]]></category>
  <category domain="post_tag" nicename="tostring"><![CDATA[tostring]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[5513209583]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Gatekeeper cloud design pattern</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/07/30/gatekeeper-cloud-design-pattern/</link>
  <pubDate>Sun, 30 Jul 2017 07:06:55 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=497</guid>
  <description/>
  <content:encoded><![CDATA[The gatekeeper cloud design pattern protects an application by placing all services behind a single facade, similar to a firewall.

Benefits
<ul>
	<li>All services and data are private and hidden behind a single public endpoint, which significantly reduces the attack surface.</li>
	<li>Request validation and malicious communication rejection is implemented in a single place.</li>
	<li>The backend services can be optimised and scaled to handle legitimate requests only.</li>
	<li>If any breach does occur, the exposure is limited to the sensitive information on the gatekeeper itself, which should be kept to a minimum.</li>
</ul>
Issues
<ul>
	<li>The gatekeeper is a single point of failure for the entire application, and must be appropriately managed for high availability and redundancy.</li>
	<li>The gatekeeper may affect performance by increasing latency, increasing load and introducing a bottleneck.</li>
</ul>
&nbsp;

Azure example implementation
<ul>
	<li>Place all backend services in a private virtual network.</li>
	<li>Place the web app endpoint in an App Service Environment which includes an Application Gateway, from which we can make use of the Web Application Firewall which blocks many common security vulnerabilities.</li>
</ul>
<img class="alignnone size-full wp-image-553" src="https://thingsishouldknowasadeveloper.files.wordpress.com/2017/07/gatekeeper.png" alt="gatekeeper" width="1779" height="929" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>497</wp:post_id>
  <wp:post_date>2017-07-30 07:06:55</wp:post_date>
  <wp:post_date_gmt>2017-07-30 07:06:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gatekeeper-cloud-design-pattern</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[7669797259]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Pets vs. Cattle</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/08/03/pets-vs-cattle/</link>
  <pubDate>Thu, 03 Aug 2017 21:51:28 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=560</guid>
  <description/>
  <content:encoded><![CDATA[Pets vs. Cattle is an analogy used to emphasise the differences between the pre-cloud and cloud MOs, and a mindset shift which needs to be taken to make use of the elastic scaling capabilities of the cloud.

<img src="https://regmedia.co.uk/2013/03/18/servers_pets_or_cattle.jpg" alt="Are your servers pets or cattle?" />

The real challenge is twofold:
<h4>The initial golden cow needs to be bred, from which you clone the rest of the herd.</h4>
This usually involves converting the current ephemeral state of servers and databases into concrete IaC (Infrastructure as Code) definitions, which can be used to stamp out new servers or database instances at will, in an automated fashion.
<h4>New genes need to be easily introduced into the gene pool.</h4>
This usually involves automating the release process, so changes to the IaC can be easily diffed, tested and deployed out to each server or database.

&nbsp;

The other big benefit of cattle is that it becomes very easy for developers and testers to have their own prod-like environment, one per feature-branch, which can be created and deleted at will, quickly.

<a href="https://azure.microsoft.com/en-gb/services/virtual-machine-scale-sets/">Azure Virtual Machine Scale Sets</a> is Microsoft's answer to stamping out cattle.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>560</wp:post_id>
  <wp:post_date>2017-08-03 21:51:28</wp:post_date>
  <wp:post_date_gmt>2017-08-03 21:51:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pets-vs-cattle</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cloud"><![CDATA[cloud]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[7862971595]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using an alternative namespace in LINQPad</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/08/17/using-an-alternative-namespace-in-linqpad/</link>
  <pubDate>Thu, 17 Aug 2017 10:01:30 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=604</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://www.linqpad.net/">LINQPad</a> is a great tool which hides the complexity of a .NET app to allow fast development and testing of arbitrary pieces of code.

Unfortunately, it also hides the namespace definition, so it's not possible out of the box to place a type in another namespace.

Fortunately there is a workaround, which consists of closing the implicit namespace which Main lives in, adding your custom namespace code, then opening a class EOF at the end:
<pre>	void Main()
	{		
		AlternativeNamespace.Foo.PrintNamespace();		
	}	
}

namespace AlternativeNamespace
{
	public static class Foo
	{
		public static void PrintNamespace()
		{
			Console.WriteLine($"Foo namespace: {MethodBase.GetCurrentMethod().DeclaringType.Namespace}");
		}
	}
}

class EOF
{
</pre>
Output:
<code>Foo namespace: AlternativeNamespace</code>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>604</wp:post_id>
  <wp:post_date>2017-08-17 10:01:30</wp:post_date>
  <wp:post_date_gmt>2017-08-17 10:01:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-an-alternative-namespace-in-linqpad</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="linqpad"><![CDATA[linqpad]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[8352013616]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Optimistic concurrency control</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/09/10/optimistic-concurrency-control/</link>
  <pubDate>Sun, 10 Sep 2017 21:31:21 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=624</guid>
  <description/>
  <content:encoded><![CDATA[Optimistic concurrency control is a technique used for concurrency.
<ul>
	<li>It is used in databases and internally by concurrent data structure libraries</li>
	<li>It assumes that actions will generally complete without contention, so proceeds to perform the update immediately, then checks afterwards if the action can be committed or must be rolled back</li>
	<li>Avoiding the use of locks provides a performance boost, especially for .NET code where a lock could require an expensive entry into kernel mode</li>
	<li>Care must be taken in use and implementation, as high load can lead to increased contention, which increases the load etc.</li>
</ul>
&nbsp;

<a href="https://en.wikipedia.org/wiki/Optimistic_concurrency_control">Wikipedia</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>624</wp:post_id>
  <wp:post_date>2017-09-10 21:31:21</wp:post_date>
  <wp:post_date_gmt>2017-09-10 21:31:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>optimistic-concurrency-control</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="category" nicename="database"><![CDATA[database]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[9154813067]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Valet Key cloud design pattern</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/09/18/the-valet-key-cloud-design-pattern/</link>
  <pubDate>Mon, 18 Sep 2017 03:35:46 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=642</guid>
  <description/>
  <content:encoded><![CDATA[A Valet Key is a special key that some cars have which has limited functionality i.e. it only opens the driver's side door and starts the engine, and does not open the glove box.

In the cloud, an application can issue an equivalent key, limited in scope and time, in the response to a request. The client then uses this key to access some other resource directly.

Benefits
<ul>
	<li>Issuing a key directly to the client means the request can return sooner, freeing up resources to handle other requests. This is especially beneficial when the operation is heavy or long running and would tie up considerable resources e.g. media transfer. Storage and data transfer are generally cheaper than computation.</li>
	<li>Keys can be issued with a convenient expiry time, allowing short bursts of communication to proceed with only the one initial server request.</li>
</ul>
Issues
<ul>
	<li>Although the keys can have fine grained scope to follow the Principle of Least Privilege, any compromise does nonetheless give an attacker full access to the resource within the scope and time limit.</li>
	<li>The potential attack surface is larger as it includes the resource itself, in addition to the issuing server and the key itself.</li>
	<li>Direct oversight of the resource is often lost. For example, it might not be possible to limit the size of an uploaded file, or gather download statistics.</li>
</ul>
Azure example implementation
<ul>
	<li>The upload file request hits the ASP.NET server, which does the lightweight setup of enabling CORS from the client browser, and retrieving a token from the blob storage.</li>
	<li>The browser can then upload the file directly to the blob.</li>
</ul>
<img class="alignnone size-full wp-image-688" src="https://thingsishouldknowasadeveloper.files.wordpress.com/2017/09/valey-key1.png" alt="valey key" width="2420" height="1491" />

<a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/valet-key">Azure Valet Key</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>642</wp:post_id>
  <wp:post_date>2017-09-18 03:35:46</wp:post_date>
  <wp:post_date_gmt>2017-09-18 03:35:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-valet-key-cloud-design-pattern</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
  <category domain="category" nicename="cloud"><![CDATA[cloud]]></category>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[design pattern]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="valet-key"><![CDATA[valet key]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[9397005200]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Azure N-series VMs (with GPUs)</title>
  <link>https://thingsishouldknowasadeveloper.wordpress.com/2017/09/24/azure-n-series-vms-with-gpus/</link>
  <pubDate>Sun, 24 Sep 2017 22:50:25 +0000</pubDate>
  <dc:creator>mrd3v3l0p3r</dc:creator>
  <guid isPermaLink="false">https://thingsishouldknowasadeveloper.wordpress.com/?p=700</guid>
  <description/>
  <content:encoded><![CDATA[Azure now offers N-series VM's with 1, 2 or 4 dedicated GPUs which can be utilised for GPU optimised tasks such as graphic rendering, video editing and parallel computing.
<ul>
	<li>The N<strong>C</strong> VMs are targeted towards <strong>c</strong>omputing power, and the N<strong>V </strong>VMs are targeted towards on demand graphical <strong>v</strong>isualisation</li>
	<li>The VMs are currently only available in some regions, like US east (Virginia)</li>
	<li>The VMs are currently only available for some OSes, like Windows Server 2012 R2 and Windows Server 2016</li>
	<li>The VMs are currently only available connected to an HDD</li>
	<li>The drivers are not installed by default, but can be found <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/windows/n-series-driver-setup">here</a>. Once they're correctly installed, the card(s) will be visible in device manager and <a href="https://www.techpowerup.com/gpuz/">GPU-Z</a></li>
	<li>GPU-Z currently has trouble reporting accurate utilisation, but <strong>nvidia-smi, </strong>usually found in C:\Program Files\NVIDIA Corporation\NVSMI\nvidia-smi.exe, offers a command line view of GPU utilisation:</li>
</ul>
<img class="alignnone size-full wp-image-730" src="https://thingsishouldknowasadeveloper.files.wordpress.com/2017/09/r9ias.gif" alt="r9Ias" width="627" height="487" />
<ul>
	<li>The NC24 VM with 4 K80s is limited to 6 simultaneous video encoding processes</li>
</ul>
<a href="https://azure.microsoft.com/en-gb/blog/azure-n-series-general-availability-on-december-1/">Azure GA announcement</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>700</wp:post_id>
  <wp:post_date>2017-09-24 22:50:25</wp:post_date>
  <wp:post_date_gmt>2017-09-24 22:50:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>azure-n-series-vms-with-gpus</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[9627152798]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
